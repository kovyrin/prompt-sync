package adapter

import (
	"crypto/sha256"
	"encoding/hex"
)

// Scope represents the precedence level of a prompt pack.
type Scope string

const (
	// ScopeOrg is organization-level (lowest precedence)
	ScopeOrg Scope = "org"
	// ScopeProject is project-level (medium precedence)
	ScopeProject Scope = "project"
	// ScopePersonal is personal-level (highest precedence)
	ScopePersonal Scope = "personal"
)

// Strictness represents the verification mode.
type Strictness string

const (
	// StrictnessNormal allows warnings but continues
	StrictnessNormal Strictness = "normal"
	// StrictnessStrict treats warnings as errors
	StrictnessStrict Strictness = "strict"
)

// PromptPack represents a resolved prompt pack from a Git repository.
type PromptPack struct {
	Name   string // e.g., "shopify/ruby-style"
	Path   string // Local filesystem path to the pack
	Source string // Source name (e.g., "shopify")
	Ref    string // Git ref (branch, tag, or commit)
}

// RenderedFile represents a file generated by an adapter.
type RenderedFile struct {
	Path    string // Relative path within target directory
	Content []byte // File content
	Hash    string // SHA256 hash of content
}

// AgentAdapter defines the interface for rendering prompt packs
// into agent-specific formats.
type AgentAdapter interface {
	// Name returns the adapter name (e.g., "cursor", "claude")
	Name() string

	// Detect checks if the agent is present/configured
	Detect() bool

	// TargetDir returns the directory where files should be rendered
	TargetDir(scope Scope) string

	// Render converts a prompt pack into agent-specific files
	Render(pack PromptPack, scope Scope) ([]RenderedFile, error)

	// Verify checks that rendered files match expected hashes
	Verify(files []RenderedFile, mode Strictness) error
}

// HashContent computes the SHA256 hash of content.
func HashContent(content []byte) string {
	h := sha256.Sum256(content)
	return hex.EncodeToString(h[:])
}

// Stub implementations moved to their own packages
// Use cursor.NewAdapter() and claude.NewAdapter() instead

// Temporary stubs for backward compatibility
func NewCursorAdapter() AgentAdapter {
	// This will be replaced with cursor.NewAdapter()
	return &cursorAdapter{}
}

type cursorAdapter struct{}

func (a *cursorAdapter) Name() string {
	return "cursor"
}

func (a *cursorAdapter) Detect() bool {
	return false
}

func (a *cursorAdapter) TargetDir(scope Scope) string {
	return ".cursor/rules/_active"
}

func (a *cursorAdapter) Render(pack PromptPack, scope Scope) ([]RenderedFile, error) {
	return nil, nil
}

func (a *cursorAdapter) Verify(files []RenderedFile, mode Strictness) error {
	return nil
}

func NewClaudeAdapter(prefix string) AgentAdapter {
	return &claudeAdapter{prefix: prefix}
}

type claudeAdapter struct {
	prefix string
}

func (a *claudeAdapter) Name() string {
	return "claude"
}

func (a *claudeAdapter) Detect() bool {
	return false
}

func (a *claudeAdapter) TargetDir(scope Scope) string {
	return ".claude/commands"
}

func (a *claudeAdapter) Render(pack PromptPack, scope Scope) ([]RenderedFile, error) {
	return nil, nil
}

func (a *claudeAdapter) Verify(files []RenderedFile, mode Strictness) error {
	return nil
}
