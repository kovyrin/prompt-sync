package unit_test

import (
	"os"
	"path/filepath"
	"strings"
	"testing"
	"time"

	"github.com/kovyrin/prompt-sync/internal/lock"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestLockWriter(t *testing.T) {
	t.Run("writes lock file with deterministic ordering", func(t *testing.T) {
		workspace := t.TempDir()
		writer := lock.New(workspace)

		sources := []lock.Source{
			{
				URL:    "https://github.com/org/prompts2.git",
				Ref:    "v2.0.0",
				Commit: "def456",
				Files: []lock.File{
					{Path: "rules/z-file.md", SourcePath: "prompts/file-z.md", Hash: "sha256:hash3"},
					{Path: "rules/a-file.md", SourcePath: "prompts/file-a.md", Hash: "sha256:hash4"},
				},
			},
			{
				URL:    "https://github.com/org/prompts1.git",
				Ref:    "v1.0.0",
				Commit: "abc123",
				Files: []lock.File{
					{Path: "rules/file2.md", SourcePath: "rules/source2.md", Hash: "sha256:hash2"},
					{Path: "rules/file1.md", SourcePath: "rules/source1.md", Hash: "sha256:hash1"},
				},
			},
		}

		err := writer.Write(sources)
		require.NoError(t, err)

		// Verify file was created
		lockPath := filepath.Join(workspace, "Promptsfile.lock")
		assert.FileExists(t, lockPath)

		// Read and verify content
		content, err := os.ReadFile(lockPath)
		require.NoError(t, err)

		// Should have header
		assert.Contains(t, string(content), "# Promptsfile.lock")
		assert.Contains(t, string(content), "# Generated by prompt-sync")
		assert.Contains(t, string(content), "# DO NOT EDIT MANUALLY")

		// Sources should be sorted by URL
		lines := strings.Split(string(content), "\n")
		prompts1Index := -1
		prompts2Index := -1
		for i, line := range lines {
			if strings.Contains(line, "prompts1.git") {
				prompts1Index = i
			}
			if strings.Contains(line, "prompts2.git") {
				prompts2Index = i
			}
		}
		assert.Greater(t, prompts1Index, 0)
		assert.Greater(t, prompts2Index, prompts1Index)

		// Files should be sorted by path
		assert.Contains(t, string(content), "rules/file1.md")
		assert.Contains(t, string(content), "rules/file2.md")
		assert.Contains(t, string(content), "rules/a-file.md")
		assert.Contains(t, string(content), "rules/z-file.md")
	})

	t.Run("reads lock file correctly", func(t *testing.T) {
		workspace := t.TempDir()
		writer := lock.New(workspace)

		// Write a lock file
		sources := []lock.Source{
			{
				URL:    "https://github.com/org/prompts.git",
				Ref:    "v1.0.0",
				Commit: "abc123",
				Files: []lock.File{
					{Path: "rules/file1.md", SourcePath: "prompts/source1.md", Hash: "sha256:hash1"},
				},
			},
		}

		err := writer.Write(sources)
		require.NoError(t, err)

		// Read it back
		lock, err := writer.Read()
		require.NoError(t, err)
		require.NotNil(t, lock)

		assert.Equal(t, "1.0", lock.Version)
		assert.WithinDuration(t, time.Now().UTC(), lock.Generated, 5*time.Second)
		assert.Len(t, lock.Sources, 1)

		source := lock.Sources[0]
		assert.Equal(t, "https://github.com/org/prompts.git", source.URL)
		assert.Equal(t, "v1.0.0", source.Ref)
		assert.Equal(t, "abc123", source.Commit)
		assert.Len(t, source.Files, 1)
		assert.Equal(t, "rules/file1.md", source.Files[0].Path)
		assert.Equal(t, "prompts/source1.md", source.Files[0].SourcePath)
		assert.Equal(t, "sha256:hash1", source.Files[0].Hash)
	})

	t.Run("returns nil for missing lock file", func(t *testing.T) {
		workspace := t.TempDir()
		writer := lock.New(workspace)

		lock, err := writer.Read()
		require.NoError(t, err)
		assert.Nil(t, lock)
	})

	t.Run("calculates file hash correctly", func(t *testing.T) {
		workspace := t.TempDir()
		writer := lock.New(workspace)

		// Create a test file
		testFile := filepath.Join(workspace, "test.txt")
		content := "test content"
		err := os.WriteFile(testFile, []byte(content), 0644)
		require.NoError(t, err)

		hash, err := writer.CalculateFileHash(testFile)
		require.NoError(t, err)

		// Verify hash format
		assert.True(t, strings.HasPrefix(hash, "sha256:"))
		assert.Len(t, hash, 71) // "sha256:" + 64 hex chars
	})

	t.Run("gets file hashes from lock file", func(t *testing.T) {
		workspace := t.TempDir()
		writer := lock.New(workspace)

		// Write a lock file
		sources := []lock.Source{
			{
				URL:    "https://github.com/org/prompts1.git",
				Commit: "abc123",
				Files: []lock.File{
					{Path: ".cursor/rules/_active/file1.md", SourcePath: "rules/file1.md", Hash: "sha256:hash1"},
					{Path: ".cursor/rules/_active/file2.md", SourcePath: "rules/file2.md", Hash: "sha256:hash2"},
				},
			},
			{
				URL:    "https://github.com/org/prompts2.git",
				Commit: "def456",
				Files: []lock.File{
					{Path: ".claude/commands/prefix-cmd.md", SourcePath: "commands/cmd.md", Hash: "sha256:hash3"},
				},
			},
		}

		err := writer.Write(sources)
		require.NoError(t, err)

		// Get file hashes
		hashes, err := writer.GetFileHashes()
		require.NoError(t, err)
		require.NotNil(t, hashes)

		assert.Len(t, hashes, 3)
		assert.Equal(t, "sha256:hash1", hashes[".cursor/rules/_active/file1.md"])
		assert.Equal(t, "sha256:hash2", hashes[".cursor/rules/_active/file2.md"])
		assert.Equal(t, "sha256:hash3", hashes[".claude/commands/prefix-cmd.md"])
	})

	t.Run("exists returns correct status", func(t *testing.T) {
		workspace := t.TempDir()
		writer := lock.New(workspace)

		// Should not exist initially
		assert.False(t, writer.Exists())

		// Write a lock file
		err := writer.Write([]lock.Source{})
		require.NoError(t, err)

		// Should exist now
		assert.True(t, writer.Exists())
	})
}
