---
description:
globs:
alwaysApply: true
---
# Rule: Prompt-Sync Project Overview

_Last updated: 2025-06-22_

## Purpose

Give every AI agent a quick orientation of the Prompt-Sync codebase, tech choices, development workflow, and guard-rails so it can contribute safely and effectively.

## What Is Prompt-Sync?

A **Go-based CLI package manager** for AI prompts. Inspired by `npm` and `bundler`, it installs and version-locks prompt packs from normal Git repos and renders them into agent-specific formats (Cursor rules, Claude slash-commands, etc.). Core commands: `init · install · add · remove · update · list · verify` plus `ci-install` alias.

## Tech Stack & Key Dependencies

- Language: **Go 1.22+** - strong stdlib, easy cross-platform builds.
- CLI framework: **spf13/cobra** - command hierarchy & flags.
- Configuration: **spf13/viper** - YAML/TOML/ENV loading.
- Git access: **Hybrid** – default **go-git** pure-Go clone/fetch; automatic fallback to system `git` exec for large or advanced repos.
- Testing: std `testing` + **stretchr/testify** - assertions & mocks.
- Linting: **golangci-lint** - aggregated linters.
- Continuous Integration: **GitHub Actions** - runs `make test lint` on push/PR.

## Directory Layout (convention-first)

```
internal/
  cmd/                Cobra sub-commands (init.go, install.go, …)
  config/             YAML loaders & structs
  git/                Git clone/cache logic
  adapter/            Agent adapters (cursor/, claude/)
  workflow/           Higher-level orchestration (install.go, …)
  lock/               Promptsfile.lock writer/parser
  conflict/           Duplicate/hash detection
  gitignore/          Managed .gitignore block helper
  ci/                 CI/headless guards

internal/test/
  system/             os/exec end-to-end tests (binary-level)
  integration/        Multi-component tests with fakes
  contract/           Public-interface tests (define first)
  unit/               Standard unit tests

testdata/             Fixture repos & sample prompt packs
```

## Running & Building

```bash
# All tests
make test           # → go test ./...

# Lint (non-blocking locally, required in CI)
make lint           # → golangci-lint run

# Build binary in ./bin
make build          # → go build -o bin/prompt-sync ./cmd/prompt-sync

# Example usage
bin/prompt-sync init
bin/prompt-sync install --yes
```

> **AI agents:** _Do NOT run `make watch` (interactive); instead, run `make test` manually after every code edit._

## Testing Strategy (Outside-In TDD)

1. **Start with the highest layer** (system or contract test).
2. Run the test → watch it fail with a meaningful error.
3. Write minimum code to pass.
4. Refactor when the suite is green.
5. Repeat one failing test at a time.

Use the directory mapping above to choose the correct test layer. Always add tests _before_ implementation files.

## Coding Standards & Tooling

* `go vet ./...` - static analysis
* `golangci-lint run` - style & bug linters (config in `.golangci.yml`)
* `goimports` / `gofmt` - formatting (CI enforced)
* Keep functions small, favour pure functions, handle errors explicitly.

## Caching & Offline Mode

* Default cache: `$HOME/.prompt-sync/repos`
* Override with env `PROMPT_SYNC_CACHE_DIR` **or** `--cache-dir <path>` flag.
* Use `--offline` to skip network fetch and operate from local cache only.

## Overlay Precedence & Conflict Rules

1. Personal → 2. Project → 3. Org (highest wins)
* Duplicate basenames across adapters abort installation in strict/CI mode.

## Strict / CI Mode

* Flag `--strict` (or `CI=true`) converts warnings into hard errors.
* `prompt-sync ci-install` ⇒ alias for `install --yes --strict` (non-interactive).

## Git & Commit Guidelines for AI Agents

* **NEVER** commit unless the user explicitly asks (“commit this”).
* **NEVER** push.
* Use `git status` & `git diff` for context only.

## Safety Footnotes

* The CLI must exit non-zero on any untrusted source or unknown Git URL unless `--allow-unknown` is provided (disabled in CI/strict).
* Build artefacts (`.cursor/rules/_active/`, `.claude/commands/<prefix>-*`) are ignored via a managed `.gitignore` block.

## Quick Reference Commands

- Run whole suite: `make test`
- Run unit tests only: `go test ./internal/...`
- Run a single test file: `go test ./internal/... -run TestName`
- Lint: `make lint`
- Build binary: `make build`
- Install prompts: `prompt-sync install --yes`
- Verify drift in CI: `prompt-sync verify`

## When in Doubt (for AI Agents)

1. Ask the user; don't guess requirements.
2. Prefer smaller diffs and incremental PRs.
3. Keep tests fast and deterministic - avoid real network calls; use fixtures.
4. Respect the **Outside-In TDD** flow at all times.

3. **Before sending any reply, scan for the characters ‘|---’ or a line that starts with ‘|’.
   If found, rewrite the content as a bullet list.**
